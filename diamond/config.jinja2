{#-
Copyright (c) 2013, Bruno Clermont
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Author: Bruno Clermont <patate@fastmail.cn>
Maintainer: Bruno Clermont <patate@fastmail.cn>
-#}
[server]

# Handlers for published metrics.
handlers = diamond.handler.graphitepickle.GraphitePickleHandler
#diamond.handler.stats_d.StatsdHandler

# Leave empty to use the current user
user =

# Leave empty to use the current group
group =

pid_file = /var/run/diamond.pid

# Directory to load collector modules from
{%- if 'files_archive' in pillar %}
collectors_path = /usr/local/diamond/share/diamond/collectors
{%- else %}
collectors_path = /usr/local/diamond/src/diamond/src/collectors/
{%- endif %}

# Directory to load collector config from
collectors_config_path = /etc/diamond/collectors/

# Interval to reload collectors
collectors_reload_interval = 3600

#handlers_config_path = /etc/diamond/handlers/

### Options for handlers
[handlers]

# logging handlers
{%- if 'graylog2_address' in pillar %}
keys = gelf,syslog
{% else %}
keys = syslog
{%- endif %}

[[default]]

[[GraphitePickleHandler]]

host = {{ pillar['graphite_address'] }}

# Port to send metrics to
port = 2004

# Socket timeout (seconds)
timeout = 15

#[[StatsdHandler]]
#host = 127.0.0.1
#port = 8125

[collectors]

[[default]]

hostname_method = uname_short

# All collectors are disabled by default
enabled = False

# Path Prefix
path_prefix =
path_suffix = os

# Default splay time (seconds)
splay = 1

# Default Poll Interval (seconds)
interval = 60

# Default collector threading model
method = Sequential

# Default numeric output
byte_unit = byte

[[ConnTrackCollector]]

enabled = True

[[CPUCollector]]

enabled = True

[[DiskSpaceCollector]]

enabled = True

{% if grains['virtual'] != 'openvzve' %}
[[DiskUsageCollector]]

enabled = True

devices = md[0-9]*$|[vs]d[a-z][0-9]*$|xvd[a-z][0-9]*$|dm\-[0-9]*$
{% endif %}

[[FilestatCollector]]

enabled = True

[[InterruptCollector]]

enabled = True

[[LoadAverageCollector]]

enabled = True

[[MemoryCollector]]

enabled = True

[[NetworkCollector]]

enabled = True
interfaces = {% for interface in salt['pillar.get']('diamond:interfaces', ('eth0', 'lo')) %}{{ interface }}{% if not loop.last %}, {% endif %}{% endfor %}

{% for host in ping_hosts|default({}) -%}
{%- if loop.first %}
[[PingCollector]]

enabled = True
{% endif %}
target_{{ host }} = {{ ping_hosts[host] }}
{%- endfor %}

[[ProcessStatCollector]]

enabled = True

[[IPVSCollector]]

enabled = False

[[SockstatCollector]]

enabled = True

[[TCPCollector]]

enabled = True

[[VMStatCollector]]

enabled = True

[loggers]

keys = root

[formatters]

keys = message_only,syslog

[logger_root]
# to increase verbosity, set DEBUG
level = INFO
{%- if 'graylog2_address' in pillar %}
handlers = gelf,syslog

[handler_gelf]
class = graypy.handler.GELFHandler
level = DEBUG
formatter = message_only
args = ('{{ pillar['graylog2_address'] }}', 12201)
{% else %}
handlers = syslog
{%- endif %}

[handler_syslog]
level = NOTSET
formatter = syslog
class = logging.handlers.SysLogHandler
args = ('/dev/log', handlers.SysLogHandler.LOG_LOCAL7)

[formatter_syslog]
class = logging.Formatter
format = %(asctime)-15s diamond[%(process)d] %(levelname)s %(name)s %(module)s.%(funcName)s:%(lineno)d %(message)s
datefmt = %b %d %H:%M:%S

[formatter_message_only]
class = logging.Formatter
format = %(message)s
datefmt =
